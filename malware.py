from operator import xor
import ast

def obtener_caracter_hexadecimal(valor):
    # Lo necesitamos como cadena
    valor = str(valor)
    equivalencias = {
        "10": "a",
        "11": "b",
        "12": "c",
        "13": "d",
        "14": "e",
        "15": "f",
    }
    if valor in equivalencias:
        return equivalencias[valor]
    else:
        return valor


def decimal_a_hexadecimal(decimal):
    hexadecimal = ""
    if decimal == 0:
    	return 00
    while decimal > 0:
        residuo = decimal % 16
        verdadero_caracter = obtener_caracter_hexadecimal(residuo)
        hexadecimal = verdadero_caracter + hexadecimal
        decimal = int(decimal / 16)
    return "0x"+hexadecimal

#Empieza el main
decimal = int(
    input("Escribe un numero decimal, yo lo convertire a hexadecimal: "))
hexadecimal = decimal_a_hexadecimal(decimal)
print("El decimal {} es {} en hexadecimal".format(decimal, hexadecimal))

print("hola mundo")
llaves=[]

datos=[]
with open("malware2.txt") as fname:
	for lineas in fname:
		datos.extend(lineas.split())
		#print("i",datos)
#print(datos)

for x in range(len(datos)):
	datos[x]=str(datos[x])

#key, hexadecimal variante 00 ff
cont =int(0)
k=decimal_a_hexadecimal(255) #int hex
print(k)
print(type(k))

for x in range(len(datos)):
	cont=int(0)
	for i in range(256):	
		c=datos[x]
		hexa_datos=c[:2] #obtenemos los primero 2 caracteres
		hexa_datos2=c[2:] #obtenemos los ultimos 2 caracteres
		#print(hexa_datos)
		#print(hexa_datos2)
		k=decimal_a_hexadecimal(cont) #int hex
		k=str(k)
		p=int(k,16) #numero del 0 a 255 para comparar
		p=int(p) #Lo convertimos a entero

		hexa_datos="0x"+hexa_datos
		hexa_datos2="0x"+hexa_datos2
		hexa_comp=int(hexa_datos,16) #criptograma a hexadecimal
		hexa_comp2=int(hexa_datos2,16) #criptograma

		hexa_comp=int(hexa_comp)
		hexa_comp2=int(hexa_comp2) #los convertimos a enteros


		#p=ast.literal_eval(k)
		res=p ^ hexa_comp
		#print(d," ",p,"= ",res)
		cont=cont+1
		if res == 77:  #4D5A ejecutable de windows (4d = 77 dec)
			llave1=p
			cont2=0
			for i in range(256):
				j=decimal_a_hexadecimal(cont2) #int hex, contador
				j=str(j)
				p2=int(j,16) #numero del 0 a 255 para comparar
				p2=int(p2) #Lo convertimos a entero

				res2=llave1 ^ hexa_comp2
				cont2=cont2+1
				if res2 == 90 : #5a =90 dec
					llave2=p2
					#print(hex(p)," ",hex(hexa_comp),"= ",hex(res))
					#print("ENCONTRADO 4D5A")
					#print(hex(llave1)," ",hex(hexa_comp2),"= ",hex(res2))
					#print("ENCONTRADO 5468")
					#print(llave1)
					#print(llave2)
					llaves.append(llave1)
					#print("La llave es: {} {}".format(hex(llave1),hex(llave2)))
					break;
#print("La llave es: {} {}".format(llaves[0],llaves[1]))

#k=decimal_a_hexadecimal(255) #int hex
k=hex(255) 
print("La llave es: {}".format(hex(llaves[0])))

#FUncion xor
xor_datos=[]
print(llaves[0])
for y in range(len(datos)):
	dat=datos[y]

	datos2=dat[:2] #obtenemos los primero 2 caracteres
	datos2="0x"+datos2
	datos2=int(datos2,16) #criptograma
	datos2=int(datos2)

	xor_datos.append(llaves[0] ^ datos2) #aplicamos xor con la llave

	datos2=dat[2:] #obtenemos los primero 2 caracteres
	datos2="0x"+datos2
	datos2=int(datos2,16) #criptograma
	datos2=int(datos2)

	xor_datos.append(llaves[0] ^ datos2) #aplicamos xor con la llave 

f=open('malware.bin','w')

for y in range(len(xor_datos)):
	nuevo_dato=hex(xor_datos[y])
	nuevo_dato=nuevo_dato[2:]
	#print(nuevo_dato)
	#f.write(nuevo_dato+' ')
	if (y%2) ==0:
		f.write(nuevo_dato+' ')
	else :
		f.write(nuevo_dato)

f.close()